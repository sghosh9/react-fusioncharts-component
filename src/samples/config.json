{
  "sampleRouteMapping": {
    "1": "/simple-chart",
    "2": "/3d-pie-chart",
    "3": "/column-line-area-combi-chart",
    "4": "/fetch-data-from-json-url",
    "5": "/fetch-data-from-xml-url",
    "6": "/update-chart-data",
    "7": "/update-chart-attributes",
    "8": "/trigger-events-from-chart",
    "9": "/percentage-calculation",
    "10": "/export-charts",
    "11": "/drill-down",
    "12": "/simple-gauge",
    "13": "/world-map",
    "14": "/apply-theme",
    "15": "/change-chart-type-runtime",
    "16": "/use-annotations",
    "17": "/render-alert",
    "18": "/chart-event"
  },
  "wrapperSampleMapping": {
    "react-fc": []
  },
  "sampleProps": {
    "1": {
      "title": "A Simple Chart",
      "desc": "A simple chart with all data embedded into the directive",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/WowAFPmmvAzx4DP29M3K/"
      },
      "directory": "simple-chart",
      "className": "SimpleColumnChart",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\r\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "2": {
      "title": "A 3D Pie Chart",
      "desc": "A 3D pie chart using the datasource attribute from components scope",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/PMYojVGxqXJoKsEKbAu9/"
      },
      "directory": "3d-pie-chart",
      "className": "3dPieChart",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Pie3D from 'fusioncharts/viz/pie3d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Pie3D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'Pie3D',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\r\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Recommended Portfolio Split\",\r\n        \"subCaption\" : \"For a net-worth of $1M\",\r\n        \"showValues\":\"1\",\r\n        \"showPercentInTooltip\" : \"0\",\r\n        \"numberPrefix\" : \"$\",\r\n        \"enableMultiSlicing\":\"1\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Equity\",\r\n            \"value\": \"300000\"\r\n        }, {\r\n            \"label\": \"Debt\",\r\n            \"value\": \"230000\"\r\n        }, {\r\n            \"label\": \"Bullion\",\r\n            \"value\": \"180000\"\r\n        }, {\r\n            \"label\": \"Real-estate\",\r\n            \"value\": \"270000\"\r\n        }, {\r\n            \"label\": \"Insurance\",\r\n            \"value\": \"20000\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "3": {
      "title": "A Column, Line and Area Combi Chart",
      "desc": "A column, line and area combination chart using the datasource attribute",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/9YVJsfW5ujm8gVXfGY0B/"
      },
      "directory": "column-line-area-combi-chart",
      "className": "ColumnAreaLineCombiChart",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport MSCombi2D from 'fusioncharts/viz/mscombi2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, MSCombi2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'mscombi2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\r\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Expense Analysis\",\r\n        \"subCaption\": \"ACME Inc.\",\r\n        \"xAxisname\": \"Region\",\r\n        \"yAxisName\": \"Amount (In USD)\",\r\n        \"numberPrefix\": \"$\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"categories\": [\r\n        {\r\n            \"category\": [\r\n                {\r\n                    \"label\": \"East\"\r\n                },\r\n                {\r\n                    \"label\": \"West\"\r\n                },\r\n                {\r\n                    \"label\": \"South\"\r\n                },\r\n                {\r\n                    \"label\": \"North\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"dataset\": [\r\n        {\r\n            \"seriesName\": \"Actual Expenses\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"1441290\"\r\n                },\r\n                {\r\n                    \"value\": \"855912\"\r\n                },\r\n                {\r\n                    \"value\": \"911404\"\r\n                },\r\n                {\r\n                    \"value\": \"648136\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"seriesName\": \"Budgeted Expenses\",\r\n            \"renderAs\": \"line\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"1297430\"\r\n                },\r\n                {\r\n                    \"value\": \"776485\"\r\n                },\r\n                {\r\n                    \"value\": \"685352\"\r\n                },\r\n                {\r\n                    \"value\": \"726791\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"seriesName\": \"Unknown liabilities\",\r\n            \"renderAs\": \"area\",\r\n            \"showAnchors\" : \"0\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"143860\"\r\n                },\r\n                {\r\n                    \"value\": \"79427\"\r\n                },\r\n                {\r\n                    \"value\": \"226052\"\r\n                },\r\n                {\r\n                    \"value\": \"78655\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n"
    },
    "4": {
      "title": "Fetch data from JSON URL",
      "desc": "Fetch data remotely from a JSON file or URL",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "fetch-data-from-json-url",
      "className": "FetchDataFromJsonUrl",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'jsonurl',\n  dataSource: 'data.json',\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "5": {
      "title": "Fetch data from XML URL",
      "desc": "Fetch data remotely from a XML file or URL",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/SC12epi1Fc3SrJq4GQde/"
      },
      "directory": "fetch-data-from-xml-url",
      "className": "FetchDataFromXmlUrl",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'xmlurl',\n  dataSource: 'data.xml',\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "<chart caption=\"Countries With Most Oil Reserves [2017-18]\" subcaption=\"In MMbbl = One Million barrels\" xaxisname=\"Country\" yaxisname=\"Reserves (MMbbl)\" numbersuffix=\"K\" theme=\"fusion\">\r\n    <set label=\"Venezuela\" value=\"290\" \/>\r\n    <set label=\"Saudi\" value=\"260\" \/>\r\n    <set label=\"Canada\" value=\"180\" \/>\r\n    <set label=\"Iran\" value=\"140\" \/>\r\n    <set label=\"Russia\" value=\"115\" \/>\r\n    <set label=\"UAE\" value=\"100\" \/>\r\n    <set label=\"US\" value=\"30\" \/>\r\n    <set label=\"China\" value=\"30\" \/>\r\n<\/chart>\r\n"
    },
    "6": {
      "title": "Update chart data from component",
      "desc": "Change the data dynamically in the component and watch the chart update automatically",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/MGVka8FdLIr4Kl3rZIL5/"
      },
      "directory": "update-chart-data",
      "className": "UpdateChartData",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = chartConfigs;\n\n    this.updateData = this.updateData.bind(this);\n  }\n\n  // This function generates random number.\n  getRandomNumber() {\n    var max = 290, min = 30;\n    return Math.round(((max - min) * Math.random()) + min);\n  }\n\n  // Handler for update button.\n  // Randomly updates the values of the chart.\n  updateData() {\n    var prevDs = Object.assign({}, this.state.dataSource);\n    prevDs.data[2].value = this.getRandomNumber();\n    prevDs.data[3].value = this.getRandomNumber();\n    this.setState({\n      dataSource: prevDs,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...this.state} />\n        <center><button className='btn btn-custom' onClick={this.updateData}>Change Chart Data</button></center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\",\r\n        \"updateAnimDuration\":\"0.4\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "7": {
      "title": "Update chart attribute from component",
      "desc": "Change a parameter in the components variable and see it automatically update the chart",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/fY9uLtqAjTiMz17EGIe0/"
      },
      "directory": "update-chart-attributes",
      "className": "UpdateChartAttributes",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = JSON.parse(JSON.stringify(chartConfigs));\n\n    this.changeBackgroundColor = this.changeBackgroundColor.bind(this);\n    this.changeCaptionTextAlignment = this.changeCaptionTextAlignment.bind(this);\n    this.resetChart = this.resetChart.bind(this);\n  }\n\n  // Handler for 'Change Background' button.\n  // Changes the chart background color.\n  changeBackgroundColor() {\n    const prevDs = Object.assign({}, this.state.dataSource);\n    prevDs.chart.bgColor = '#efefef';\n    this.setState({\n      dataSource: prevDs,\n    });\n  }\n\n  // Handler for 'Change CaptionAlignment' button.\n  // Changes the caption alignment to left.\n  changeCaptionTextAlignment() {\n    const prevDs = Object.assign({}, this.state.dataSource);\n    prevDs.chart.captionAlignment = 'left';\n    this.setState({\n      dataSource: prevDs,\n    });\n  }\n\n  // Handler for 'Reset' button.\n  // Resets the chart to the original version.\n  resetChart() {\n    this.setState({\n      dataSource: JSON.parse(JSON.stringify(chartConfigs.dataSource)),\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...this.state} />\n        <center>\n          <button className='btn btn-custom' onClick={this.changeBackgroundColor}>Change Background</button>\n          <button className='btn btn-custom' onClick={this.changeCaptionTextAlignment}>Change Caption Alignment</button>\n          <button className='btn btn-red' onClick={this.resetChart}>Reset</button>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n      \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n      \"subCaption\": \"In MMbbl = One Million barrels\",\r\n      \"xAxisName\": \"Country\",\r\n      \"yAxisName\": \"Reserves (MMbbl)\",\r\n      \"numberSuffix\": \"K\",\r\n      \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "8": {
      "title": "Trigger events from chart",
      "desc": "Hover on a plot to trigger an event in the component, and update variables",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/Amq8ly5uIW9KQ5XepNzU/"
      },
      "directory": "trigger-events-from-chart",
      "className": "TriggerEventsFromChart",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      actualValue: 'Hover on the plot to see the value along with the label',\n    };\n\n    this.showPlotValue = this.showPlotValue.bind(this);\n  }\n\n  // Event callback handler for 'dataplotRollOver'.\n  // Shows the value of the hovered plot on the page.\n  showPlotValue(eventObj, dataObj) {\n    this.setState({\n      actualValue: `You’re are currently hovering over ${dataObj.categoryLabel} whose value is ${dataObj.displayValue}`,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} fcEvent-dataplotRollOver={this.showPlotValue} />\n        <p style={{ padding: '10px', background: '#f5f2f0' }}>{this.state.actualValue}</p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "9": {
      "title": "Percentage Calculation",
      "desc": "Hover on a plot to see the percentage value with respect to total",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/Amq8ly5uIW9KQ5XepNzU/"
      },
      "directory": "percentage-calculation",
      "className": "PercentageCalculation",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      actualValue: 'Hover on the plot to see the percentage along with the label',\n    };\n\n    this.showPlotValue = this.showPlotValue.bind(this);\n    this.renderComplete = this.renderComplete.bind(this);\n  }\n\n  // Event callback handler for 'dataplotRollOver'.\n  // Shows the percentage of the hovered plot on the page.\n  showPlotValue(eventObj, dataObj) {\n    const value = ((dataObj.value / this.state.total) * 100).toFixed(2);\n    this.setState({\n      actualValue: `${dataObj.categoryLabel} is ${value}% of the total`,\n    });\n  }\n\n  // Trigerred when chart is rendered.\n  // Configures the linked charts.\n  renderComplete(chart) {\n    const chartData = chart.getJSONData();\n    this.setState({\n      total: chartData.data.reduce((p, c) => p + Number(c.value), 0),\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC\n          {...chartConfigs}\n          onRender={this.renderComplete}\n          fcEvent-dataplotRollOver={this.showPlotValue}\n        />\n        <p style={{ padding: '10px', background: '#f5f2f0' }}>{this.state.actualValue}</p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n  \"chart\": {\r\n      \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n      \"subCaption\": \"In MMbbl = One Million barrels\",\r\n      \"xAxisName\": \"Country\",\r\n      \"yAxisName\": \"Reserves (MMbbl)\",\r\n      \"numberSuffix\": \"K\",\r\n      \"theme\": \"fusion\"\r\n  },\r\n  \"data\": [\r\n      {\r\n          \"label\": \"Venezuela\",\r\n          \"value\": \"290\"\r\n      },\r\n      {\r\n          \"label\": \"Saudi\",\r\n          \"value\": \"260\"\r\n      },\r\n      {\r\n          \"label\": \"Canada\",\r\n          \"value\": \"180\"\r\n      },\r\n      {\r\n          \"label\": \"Iran\",\r\n          \"value\": \"140\"\r\n      },\r\n      {\r\n          \"label\": \"Russia\",\r\n          \"value\": \"115\"\r\n      },\r\n      {\r\n          \"label\": \"UAE\",\r\n          \"value\": \"100\"\r\n      },\r\n      {\r\n          \"label\": \"US\",\r\n          \"value\": \"30\"\r\n      },\r\n      {\r\n          \"label\": \"China\",\r\n          \"value\": \"30\"\r\n      }\r\n  ]\r\n}\r\n"
    },
    "10": {
      "title": "Export multiple charts",
      "desc": "Use Batch Export to export multiple charts as a single image/PDF",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/TL2qJgny5sGkTlf4umN0/"
      },
      "directory": "client-side-exporting",
      "className": "ClientSideExporting",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport StackedColumn2D from 'fusioncharts/viz/stackedcolumn2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, StackedColumn2D, FusionTheme);\n\nconst chart1Configs = {\n  type: 'column2d',\n  width: 700,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\nconst chart2Configs = {\n  type: 'stackedcolumn2d',\n  width: 600,\n  height: 500,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor() {\n    super();\n    this.exportChart = this.exportChart.bind(this);\n  }\n\n  // Handler for export button.\n  // Fires an export operation which exports all charts on the page as a PDF.\n  exportChart(e) {\n    FusionCharts.batchExport({\n      exportFormat: 'pdf',\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <ReactFC {...chart1Configs} />\n        <ReactFC {...chart2Configs} />\n        <center><button className='btn btn-custom' onClick={this.exportChart}>Export both charts as a single PDF</button></center>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    data1: {\r\n        \"chart\": {\r\n            \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n            \"subCaption\": \"In MMbbl = One Million barrels\",\r\n            \"xAxisName\": \"Country\",\r\n            \"yAxisName\": \"Reserves (MMbbl)\",\r\n            \"numberSuffix\": \"K\",\r\n            \"theme\": \"fusion\"\r\n        },\r\n        \"data\": [\r\n            {\r\n                \"label\": \"Venezuela\",\r\n                \"value\": \"290\"\r\n            },\r\n            {\r\n                \"label\": \"Saudi\",\r\n                \"value\": \"260\"\r\n            },\r\n            {\r\n                \"label\": \"Canada\",\r\n                \"value\": \"180\"\r\n            },\r\n            {\r\n                \"label\": \"Iran\",\r\n                \"value\": \"140\"\r\n            },\r\n            {\r\n                \"label\": \"Russia\",\r\n                \"value\": \"115\"\r\n            },\r\n            {\r\n                \"label\": \"UAE\",\r\n                \"value\": \"100\"\r\n            },\r\n            {\r\n                \"label\": \"US\",\r\n                \"value\": \"30\"\r\n            },\r\n            {\r\n                \"label\": \"China\",\r\n                \"value\": \"30\"\r\n            }\r\n        ]\r\n    },\r\n    data2: {\r\n        \"chart\": {\r\n            \"caption\": \"Yearly Energy Production Rate\",\r\n            \"subCaption\": \" Top 5 Developed Countries\",\r\n            \"numbersuffix\": \" TWh\",\r\n            \"showSum\": \"1\",\r\n            \"plotToolText\": \"$label produces <b>$dataValue<\/b> of energy from $seriesName\",\r\n            \"theme\": \"fusion\"\r\n        },\r\n        \"categories\": [\r\n            {\r\n                \"category\": [\r\n                    {\r\n                        \"label\": \"Canada\"\r\n                    },\r\n                    {\r\n                        \"label\": \"China\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Russia\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Australia\"\r\n                    },\r\n                    {\r\n                        \"label\": \"United States\"\r\n                    },\r\n                    {\r\n                        \"label\": \"France\"\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        \"dataSet\": [\r\n            {\r\n                \"seriesName\": \"Coal\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"400\"\r\n                    },\r\n                    {\r\n                        \"value\": \"830\"\r\n                    },\r\n                    {\r\n                        \"value\": \"500\"\r\n                    },\r\n                    {\r\n                        \"value\": \"420\"\r\n                    },\r\n                    {\r\n                        \"value\": \"790\"\r\n                    },\r\n                    {\r\n                        \"value\": \"380\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Hydro\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"350\"\r\n                    },\r\n                    {\r\n                        \"value\": \"620\"\r\n                    },\r\n                    {\r\n                        \"value\": \"410\"\r\n                    },\r\n                    {\r\n                        \"value\": \"370\"\r\n                    },\r\n                    {\r\n                        \"value\": \"720\"\r\n                    },\r\n                    {\r\n                        \"value\": \"310\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Nuclear\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"210\"\r\n                    },\r\n                    {\r\n                        \"value\": \"400\"\r\n                    },\r\n                    {\r\n                        \"value\": \"450\"\r\n                    },\r\n                    {\r\n                        \"value\": \"180\"\r\n                    },\r\n                    {\r\n                        \"value\": \"570\"\r\n                    },\r\n                    {\r\n                        \"value\": \"270\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Gas\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"180\"\r\n                    },\r\n                    {\r\n                        \"value\": \"330\"\r\n                    },\r\n                    {\r\n                        \"value\": \"230\"\r\n                    },\r\n                    {\r\n                        \"value\": \"160\"\r\n                    },\r\n                    {\r\n                        \"value\": \"440\"\r\n                    },\r\n                    {\r\n                        \"value\": \"350\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Oil\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"60\"\r\n                    },\r\n                    {\r\n                        \"value\": \"200\"\r\n                    },\r\n                    {\r\n                        \"value\": \"200\"\r\n                    },\r\n                    {\r\n                        \"value\": \"50\"\r\n                    },\r\n                    {\r\n                        \"value\": \"230\"\r\n                    },\r\n                    {\r\n                        \"value\": \"150\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}\r\n"
    },
    "11": {
      "title": "Add drill-down to chart",
      "desc": "Use LinkedCharts to quickly add drill-down to charts",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "drill-down",
      "className": "DrillDown",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport Pie2D from 'fusioncharts/viz/pie2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, Pie2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\n// Trigerred when chart is rendered.\n// Configures the linked charts.\nconst alterChart = (chart) => {\n  chart.configureLink({\n    type: 'pie2d',\n    width: '500',\n    overlayButton: {\n      message: 'Back',\n      fontColor: '880000',\n      bgColor: 'FFEEEE',\n      borderColor: '660000',\n    },\n  }, 0);\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} onRender={alterChart} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Sales of top 3 juice flavors last year\",\r\n        \"subcaption\": \"Click on a column to see details\",\r\n        \"xaxisname\": \"Flavor\",\r\n        \"yaxisname\": \"Amount (In USD)\",\r\n        \"numberprefix\": \"$\",\r\n        \"theme\": \"fusion\",\r\n        \"rotateValues\": \"0\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Apple\",\r\n            \"value\": \"810000\",\r\n            \"link\": \"newchart-xml-apple\"\r\n        },\r\n        {\r\n            \"label\": \"Cranberry\",\r\n            \"value\": \"620000\",\r\n            \"link\": \"newchart-xml-cranberry\"\r\n        },\r\n        {\r\n            \"label\": \"Grape\",\r\n            \"value\": \"350000\",\r\n            \"link\": \"newchart-xml-grape\"\r\n        }\r\n    ],\r\n    \"linkeddata\": [\r\n        {\r\n            \"id\": \"apple\",\r\n            \"linkedchart\": {\r\n                \"chart\": {\r\n                    \"caption\": \"Apple Juice - Quarterly Sales\",\r\n                    \"subcaption\": \"Last year\",\r\n                    \"numberprefix\": \"$\",\r\n                    \"theme\": \"fusion\",\r\n                    \"rotateValues\": \"0\",\r\n                    \"plottooltext\": \"$label, $dataValue,  $percentValue\"\r\n                },\r\n                \"data\": [{\r\n                    \"label\": \"Q1\",\r\n                    \"value\": \"157000\",\r\n                    \"displayValue\": \"Q1, $157K\"\r\n                }, {\r\n                    \"label\": \"Q2\",\r\n                    \"value\": \"172000\",\r\n                    \"displayValue\": \"Q2, $172K\"\r\n                }, {\r\n                    \"label\": \"Q3\",\r\n                    \"value\": \"206000\",\r\n                    \"displayValue\": \"Q3, $206K\"\r\n                }, {\r\n                    \"label\": \"Q4\",\r\n                    \"value\": \"275000\",\r\n                    \"displayValue\": \"Q4, $275K\"\r\n                }]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"cranberry\",\r\n            \"linkedchart\": {\r\n                \"chart\": {\r\n                    \"caption\": \"Cranberry Juice - Quarterly Sales\",\r\n                    \"subcaption\": \"Last year\",\r\n                    \"numberprefix\": \"$\",\r\n                    \"theme\": \"fusion\",\r\n                    \"plottooltext\": \"$label, $dataValue,  $percentValue\"\r\n                },\r\n                \"data\": [\r\n                    {\r\n                        \"label\": \"Q1\",\r\n                        \"value\": \"102000\",\r\n                        \"displayValue\": \"Q1, $102K\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Q2\",\r\n                        \"value\": \"142000\",\r\n                        \"displayValue\": \"Q2, $142K\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Q3\",\r\n                        \"value\": \"187000\",\r\n                        \"displayValue\": \"Q3, $187K\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Q4\",\r\n                        \"value\": \"189000\",\r\n                        \"displayValue\": \"Q4, $189K\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"grape\",\r\n            \"linkedchart\": {\r\n                \"chart\": {\r\n                    \"caption\": \"Grape Juice - Quarterly Sales\",\r\n                    \"subcaption\": \"Last year\",\r\n                    \"numberprefix\": \"$\",\r\n                    \"theme\": \"fusion\",\r\n                    \"rotateValues\": \"0\",\r\n                    \"plottooltext\": \"$label, $dataValue,  $percentValue\"\r\n                },\r\n                \"data\": [{\r\n                    \"label\": \"Q1\",\r\n                    \"value\": \"45000\",\r\n                    \"displayValue\": \"Q1, $45K\"\r\n                }, {\r\n                    \"label\": \"Q2\",\r\n                    \"value\": \"72000\",\r\n                    \"displayValue\": \"Q2, $72K\"\r\n                }, {\r\n                    \"label\": \"Q3\",\r\n                    \"value\": \"95000\",\r\n                    \"displayValue\": \"Q3, $95K\"\r\n                }, {\r\n                    \"label\": \"Q4\",\r\n                    \"value\": \"108000\",\r\n                    \"displayValue\": \"Q4, $108K\"\r\n                }]\r\n            }\r\n        }\r\n    ]\r\n}\r\n"
    },
    "12": {
      "title": "A simple gauge",
      "desc": "A simple gauge to show customer satisfaction score",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "simple-gauge",
      "className": "SimpleGauge",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport AngularGauge from 'fusioncharts/viz/angulargauge';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, AngularGauge, FusionTheme);\n\nconst chartConfigs = {\n  type: 'angulargauge',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Nordstorm's Customer Satisfaction Score for 2017\",\r\n        \"lowerLimit\": \"0\",\r\n        \"upperLimit\": \"100\",\r\n        \"showValue\": \"1\",\r\n        \"numberSuffix\": \"%\",\r\n        \"theme\": \"fusion\",\r\n        \"showToolTip\": \"0\"\r\n    },\r\n    \"colorRange\": {\r\n        \"color\": [\r\n            {\r\n                \"minValue\": \"0\",\r\n                \"maxValue\": \"50\",\r\n                \"code\": \"#F2726F\"\r\n            }, {\r\n                \"minValue\": \"50\",\r\n                \"maxValue\": \"75\",\r\n                \"code\": \"#FFC533\"\r\n            }, {\r\n                \"minValue\": \"75\",\r\n                \"maxValue\": \"100\",\r\n                \"code\": \"#62B58F\"\r\n            }\r\n        ]\r\n    },\r\n    \"dials\": {\r\n        \"dial\": [\r\n            {\r\n                \"value\": \"81\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n"
    },
    "13": {
      "title": "World Map",
      "desc": "World map showing data for different continents",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "simple-map",
      "className": "SimpleMap",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Maps from 'fusioncharts/maps';\nimport World from 'fusioncharts/maps/es/fusioncharts.world';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Maps, World, FusionTheme);\n\nconst chartConfigs = {\n  type: 'world',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Average Annual Population Growth\",\r\n        \"subcaption\": \" 1955-2015\",\r\n        \"numbersuffix\": \"%\",\r\n        \"includevalueinlabels\": \"1\",\r\n        \"labelsepchar\": \": \",\r\n        \"entityFillHoverColor\": \"#FFF9C4\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"colorrange\": {\r\n        \"minvalue\": \"0\",\r\n        \"code\": \"#FFE0B2\",\r\n        \"gradient\": \"1\",\r\n        \"color\": [\r\n            {\r\n                \"minvalue\": \"0.5\",\r\n                \"maxvalue\": \"1.0\",\r\n                \"color\": \"#FFD74D\"\r\n            },\r\n            {\r\n                \"minvalue\": \"1.0\",\r\n                \"maxvalue\": \"2.0\",\r\n                \"color\": \"#FB8C00\"\r\n            },\r\n            {\r\n                \"minvalue\": \"2.0\",\r\n                \"maxvalue\": \"3.0\",\r\n                \"color\": \"#E65100\"\r\n            }\r\n        ]\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"id\": \"NA\",\r\n            \"value\": \".82\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"SA\",\r\n            \"value\": \"2.04\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"AS\",\r\n            \"value\": \"1.78\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"EU\",\r\n            \"value\": \".40\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"AF\",\r\n            \"value\": \"2.58\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"AU\",\r\n            \"value\": \"1.30\",\r\n            \"showLabel\": \"1\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "14": {
      "title": "Applying a different theme",
      "desc": "Choosing from different themes available in FusionCharts Suite",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "apply-theme",
      "className": "ApplyTheme",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport GammelTheme from 'fusioncharts/themes/es/fusioncharts.theme.gammel';\n\nReactFC.fcRoot(FusionCharts, Column2D, GammelTheme);\n\nconst chartConfigs = {\n  type: 'Column2D',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n  \"chart\": {\r\n      \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n      \"subCaption\": \"In MMbbl = One Million barrels\",\r\n      \"xAxisName\": \"Country\",\r\n      \"yAxisName\": \"Reserves (MMbbl)\",\r\n      \"numberSuffix\": \"K\",\r\n      \"theme\": \"gammel\"\r\n  },\r\n  \"data\": [\r\n      {\r\n          \"label\": \"Venezuela\",\r\n          \"value\": \"290\"\r\n      },\r\n      {\r\n          \"label\": \"Saudi\",\r\n          \"value\": \"260\"\r\n      },\r\n      {\r\n          \"label\": \"Canada\",\r\n          \"value\": \"180\"\r\n      },\r\n      {\r\n          \"label\": \"Iran\",\r\n          \"value\": \"140\"\r\n      },\r\n      {\r\n          \"label\": \"Russia\",\r\n          \"value\": \"115\"\r\n      },\r\n      {\r\n          \"label\": \"UAE\",\r\n          \"value\": \"100\"\r\n      },\r\n      {\r\n          \"label\": \"US\",\r\n          \"value\": \"30\"\r\n      },\r\n      {\r\n          \"label\": \"China\",\r\n          \"value\": \"30\"\r\n      }\r\n  ]\r\n}\r\n"
    },
    "15": {
      "title": "Change chart type at runtime",
      "desc": "",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/u6SQHYgOsVeJVKKdC0ZB/"
      },
      "directory": "change-chart-type-runtime",
      "className": "ChangeChartTypeRuntime",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport Bar2D from 'fusioncharts/viz/bar2d';\nimport Line from 'fusioncharts/viz/line';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, Bar2D, Line, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = chartConfigs;\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  // Handler for select list to change chart type.\n  onChange(e) {\n    this.setState({\n      type: e.currentTarget.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...this.state} />\n        <center>\n          <select onChange={this.onChange}>\n            <option value='column2d'>Column 2D Chart</option>\n            <option value='bar2d'>Bar 2D Chart</option>\n            <option value='line'>Line 2D Chart</option>\n          </select>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "16": {
      "title": "Use annotations",
      "desc": "",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "use-annotations",
      "className": "UseAnnotations",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Spline from 'fusioncharts/viz/spline';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Spline, FusionTheme);\n\nconst chartConfigs = {\n  type: 'spline',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Bakersfield Central - Total footfalls\",\r\n        \"subCaption\": \"Last week\",\r\n        \"xAxisName\": \"Day\",\r\n        \"yAxisName\": \"No. of Visitors (In 1000s)\",\r\n        \"showValues\": \"0\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"annotations\": {\r\n        \"groups\": [\r\n            {\r\n                \"id\": \"anchor-highlight\",\r\n                \"items\": [\r\n                    {\r\n                        \"id\": \"high-star\",\r\n                        \"type\": \"circle\",\r\n                        \"x\": \"$dataset.0.set.2.x\",\r\n                        \"y\": \"$dataset.0.set.2.y\",\r\n                        \"radius\": \"12\",\r\n                        \"color\": \"#6baa01\",\r\n                        \"border\": \"2\",\r\n                        \"borderColor\": \"#f8bd19\"\r\n                    },\r\n                    {\r\n                        \"id\": \"label\",\r\n                        \"type\": \"text\",\r\n                        \"text\": \"Highest footfall 25.5K\",\r\n                        \"fillcolor\": \"#6baa01\",\r\n                        \"rotate\": \"90\",\r\n                        \"x\": \"$dataset.0.set.2.x+75\",\r\n                        \"y\": \"$dataset.0.set.2.y-2\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Mon\",\r\n            \"value\": \"15123\"\r\n        },\r\n        {\r\n            \"label\": \"Tue\",\r\n            \"value\": \"14233\"\r\n        },\r\n        {\r\n            \"label\": \"Wed\",\r\n            \"value\": \"25507\"\r\n        },\r\n        {\r\n            \"label\": \"Thu\",\r\n            \"value\": \"9110\"\r\n        },\r\n        {\r\n            \"label\": \"Fri\",\r\n            \"value\": \"15529\"\r\n        },\r\n        {\r\n            \"label\": \"Sat\",\r\n            \"value\": \"20803\"\r\n        },\r\n        {\r\n            \"label\": \"Sun\",\r\n            \"value\": \"19202\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "17": {
      "title": "Render Alert",
      "desc": "",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "render-alert",
      "className": "RenderAlert",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Column2D from 'fusioncharts/viz/column2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: 'You will see a notification here after chart completes rendering'\n    };\n\n    this.renderComplete = this.renderComplete.bind(this);\n  }\n\n  // Event callback handler for 'rendered' event.\n  // Shows a message below the chart.\n  renderComplete() {\n    this.setState({\n      message: 'Chart has completed rendering'\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} fcEvent-rendered={this.renderComplete}/>\n        <p style={{ padding: '10px', background: '#f5f2f0' }}>{this.state.message}</p>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "18": {
      "title": "Chart event",
      "desc": "",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "chart-event",
      "className": "ChartEvent",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Pie2D from 'fusioncharts/viz/pie2d';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/es/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\nconst chartConfigs = {\n  type: 'pie2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: 'You will see a notification here on rotating the chart'\n    };\n\n    this.rotationStart = this.rotationStart.bind(this);\n    this.rotationEnd = this.rotationEnd.bind(this);\n  }\n\n  // Event callback handler for 'rotationStart' event.\n  // Shows a message when pie2d chart is being rotated.\n  rotationStart() {\n    this.setState({\n      message: 'Chart is rotating'\n    });\n  }\n\n  // Event callback handler for 'rotationEnd' event.\n  // Shows a message when pie2d chart has stopped rotating.\n  rotationEnd() {\n    this.setState({\n      message: 'Chart has stopped rotating'\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} fcEvent-rotationStart={this.rotationStart} fcEvent-rotationEnd={this.rotationEnd}/>\n        <p style={{ padding: '10px', background: '#f5f2f0' }}>{this.state.message}</p>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Recommended Portfolio Split\",\r\n        \"subCaption\" : \"For a net-worth of $1M\",\r\n        \"showValues\":\"1\",\r\n        \"showPercentInTooltip\" : \"0\",\r\n        \"numberPrefix\" : \"$\",\r\n        \"enableMultiSlicing\":\"1\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Equity\",\r\n            \"value\": \"300000\"\r\n        }, {\r\n            \"label\": \"Debt\",\r\n            \"value\": \"230000\"\r\n        }, {\r\n            \"label\": \"Bullion\",\r\n            \"value\": \"180000\"\r\n        }, {\r\n            \"label\": \"Real-estate\",\r\n            \"value\": \"270000\"\r\n        }, {\r\n            \"label\": \"Insurance\",\r\n            \"value\": \"20000\"\r\n        }\r\n    ]\r\n}\r\n"
    }
  }
}
